#+title: Inception_v3

All right... Well, let's try re-building the project for the third
time now... Fuck this project...

Start from your latest VM snapshot. There's a simple docker-compose
there that sets up nginx running on 443.

To add an nginx user (although it might not be necessary):
 - adduser --system --no-create-home --disabled-login --disabled-password --group nginx
* environment
#+name: env
#+header: :tangle ./srcs/.env :mkdirp yes
#+begin_src text
# WORDPRESS SETUP
WORDPRESS_DB_HOST=mariadb:3306
WORDPRESS_DB_ADM_USER=superuser
WORDPRESS_DB_ADM_PASSWORD=password
WORDPRESS_DB_NAME=wordpress
WORDPRESS_TABLE_PREFIX=wp_
WORDPRESS_DB_CHARSET=utf8
WORDPRESS_DB_COLLATE=
WORDPRESS_DB_USER=tgarriss
WORDPRESS_DB_PASSWORD=password
# WORDPRESS SITE SETUP
WORDPRESS_SITE_URL=https://tgarriss.42.fr
WORDPRESS_SITE_TITLE="Inception"
WORDPRESS_ADMIN_EMAIL=tgarriss@student.42.fr
# MARIADB SETUP
MYSQL_ROOT_USER=tgarriss
MYSQL_ROOT_PASSWORD=wordpress
MYSQL_DATABASE=wordpress
#+end_src
* docker-compose
#+name: docker-compose
#+header: :tangle ./srcs/docker-compose.yml :mkdirp yes
#+begin_src dockerfile
version: '3'

services:
  nginx:
    container_name: nginx
    build: ./requirements/nginx/
    env_file: .env
    depends_on:
      - wordpress
    ports:
      - 443:443
    volumes:
      - ./wordpress:/var/www/html
    networks:
      - wp-network
    restart: always

  mariadb:
    container_name: mariadb
    build: ./requirements/mariadb
    env_file: .env
    volumes:
      - ./database:/var/lib/mysql
    networks:
      - wp-network
    restart: always

  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress
    env_file: .env
    depends_on:
      - mariadb
    volumes:
      - ./wordpress:/var/www/html
    networks:
      - wp-network
    restart: always

networks:
  wp-network:
    name: wp-network
    driver: bridge
#+end_src

* nginx
#+name: nginx-dockerfile
#+header: :tangle ./srcs/requirements/nginx/Dockerfile :mkdirp yes
#+begin_src dockerfile
FROM debian:buster

RUN apt-get update -y && apt-get -y upgrade
RUN apt-get -y install nginx openssl
RUN apt-get -y install php php7.3-fpm

RUN mkdir /etc/nginx/ssl

RUN openssl req -x509 -nodes -days 365 \
        -newkey rsa:2048 \
        -keyout /etc/nginx/ssl/tgarriss.key \
        -out /etc/nginx/ssl/tgarriss.csr \
        -subj "/C=CA/ST=QC/L=Thomas/O=42Quebec/OU=tgarriss/CN=tgarriss"

COPY ./conf/nginx.conf .
RUN rm -rf /etc/nginx/sites-enabled/* && \
	mv nginx.conf /etc/nginx/sites-available/nginx.conf && \
	ln -fs /etc/nginx/sites-available/nginx.conf /etc/nginx/sites-enabled/
# COPY ./index.html /var/www/html/

EXPOSE 443

CMD ["/usr/sbin/nginx", "-g", "daemon off;"]
#+end_src

#+name: nginx-conf
#+header: :tangle ./srcs/requirements/nginx/conf/nginx.conf :mkdirp yes
#+begin_src text
server {
       listen 443 ssl;
       listen [::]:443 ssl;
       server_name tgarriss.42.fr;

       ssl_certificate /etc/nginx/ssl/tgarriss.csr;
       ssl_certificate_key /etc/nginx/ssl/tgarriss.key;
       ssl_protocols TLSv1.2 TLSv1.3;

       root /var/www/html/;
       index index.html;

       location / {
                try_files $uri $uri/ /index.php$is_args$args;
            }

       location ~ \.php$ {
                 try_files $uri = 404;
                 fastcgi_split_path_info ^(.+\.php)(/.+)$;
                 fastcgi_pass wordpress:9000;
                 fastcgi_index index.php;
                 include fastcgi_params;
                 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                 fastcgi_param PATH_INFO $fastcgi_path_info;
            }
}
#+end_src
* wordpress
#+name: wordpress-dockerfile
#+header: :tangle ./srcs/requirements/wordpress/Dockerfile :mkdirp yes
#+begin_src dockerfile
FROM debian:buster

RUN apt-get -y update && apt-get -y upgrade
RUN apt-get -y install php-fpm php-mysql php
RUN apt-get -y install wget

RUN mkdir -p /var/www/html
WORKDIR /var/www/html
#WORKDIR /tmp
#RUN curl -LO https://wordpress.org/latest.tar.gz
#RUN tar -xzvf latest.tar.gz
COPY ./conf/wp-config.php /tmp/wordpress/wp-config.php
COPY ./conf/www.conf /etc/php/7.3/fpm/pool.d/
#RUN mv /tmp/wordpress/ /var/www/html
RUN chown -R www-data:www-data /var/www/html

COPY ./tools/wp-entrypoint.sh /usr/local/bin/

EXPOSE 9000

USER www-data

ENTRYPOINT ["wp-entrypoint.sh"]
#+end_src

#+name: wp-entrypoint
#+header: :tangle ./srcs/requirements/wordpress/tools/wp-entrypoint.sh :mkdirp yes
#+begin_src bash
#!/bin/bash

wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod +x wp-cli.phar

./wp-cli.phar core download

./wp-cli.phar config create \
    --dbname=$WP_DB_NAME    \
    --dbuser=$WP_DB_ADM_USER    \
    --dbpass=$WP_DB_ADM_PASSWORD \
    --dbhost=$WP_DB_HOST    \
    --dbprefix=$WP_TABLE_PREFIX \
    --dbcharset=$WP_DB_CHARSET  \
    --dbcolalte=$WP_DB_COLLATE

./wp-cli.phar db create

./wp-cli.phar core install  \
    --url=$WP_SITE_URL  \
    --title=$WP_SITE_TITLE  \
    --admin_user=$WP_DB_ADM_USER    \
    --admin_password=$WP_DB_ADM_PASSWORD    \
    --admin_email=$WP_ADMIN_EMAIL   \
    --skip-email

php-fpm7.3
#+end_src

#+name: wordpress-config
#+header: :tangle ./srcs/requirements/wordpress/conf/wp-config.php :mkdirp yes
#+begin_src text
<?php
/**
 ,* The base configuration for WordPress
 ,*
 ,* The wp-config.php creation script uses this file during the installation.
 ,* You don't have to use the web site, you can copy this file to "wp-config.php"
 ,* and fill in the values.
 ,*
 ,* This file contains the following configurations:
 ,*
 ,* * Database settings
 ,* * Secret keys
 ,* * Database table prefix
 ,* * ABSPATH
 ,*
 ,* @link https://wordpress.org/support/article/editing-wp-config-php/
 ,*
 ,* @package WordPress
 ,*/

// ** Database settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', 'wordpress' );

/** Database username */
define( 'DB_USER', 'tgarriss' );

/** Database password */
define( 'DB_PASSWORD', 'password' );


define('FS_METHOD', 'direct');

/** Database hostname */
define( 'DB_HOST', 'localhost' );

/** Database charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8' );

/** The database collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );

/**#@+
 ,* Authentication unique keys and salts.
 ,*
 ,* Change these to different unique phrases! You can generate these using
 ,* the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
 ,*
 ,* You can change these at any point in time to invalidate all existing cookies.
 ,* This will force all users to have to log in again.
 ,*
 ,* @since 2.6.0
 ,*/
define('AUTH_KEY','?x|uo#rHQFcr{-$:P+NNlm9j}(nh9tuR1*ebl/z-&+ h7hhZ= N!uu9L]/r|F4A_');
define('SECURE_AUTH_KEY', 'dL{$KWOCQ5k+-CVy19/Vc3b-7C.Cz=DCjK$qI2gIb|zv}JF8;H59VCh+4NDJd.Dh');
define('LOGGED_IN_KEY', '/aIyl{uCX~wxkY|,gb1.BT/+-1|Uj`&5@3NTK p]UJf:D4h+]L;T:W=olyt8^ULg');
define('NONCE_KEY', '>>0q{$GF[{,m(Sf!!%xtp2m5<j-d-$_J})%F8Q${&GyuM.f LrEh5P#`|dhWLCny');
define('AUTH_SALT', '_o|BHdPs.[N>c,AVR_/;=qI2$b1qVy,Z2,$tG#=|@D4i`8lZGC&yv$;M}3gjC_2,');
define('SECURE_AUTH_SALT', '|d4(Q?<zrQe|Sz$Hc#sJ6|].Lv.zqe2.+{S: !j,vJ^x1-gRF<B>0*3rU2(nsYj|');
define('LOGGED_IN_SALT', '9epe[S--SnMi)^nWlu5aKF-7_o+%2:m}c-tb/XGy$Tu6-&iC8L.5Hfy6XVx<Nz_Q');
define('NONCE_SALT', 'yV; }=fHE{! )U`L:]!&B{oDF1j(^$dM]bAo_^-v)E|a2QkSfyqVu|z]|OJ2-ewO');

/**#@-*/

/**
 ,* WordPress database table prefix.
 ,*
 ,* You can have multiple installations in one database if you give each
 ,* a unique prefix. Only numbers, letters, and underscores please!
 ,*/
$table_prefix = 'wp_';

/**
 ,* For developers: WordPress debugging mode.
 ,*
 ,* Change this to true to enable the display of notices during development.
 ,* It is strongly recommended that plugin and theme developers use WP_DEBUG
 ,* in their development environments.
 ,*
 ,* For information on other constants that can be used for debugging,
 ,* visit the documentation.
 ,*
 ,* @link https://wordpress.org/support/article/debugging-in-wordpress/
 ,*/
define( 'WP_DEBUG', false );

/* Add any custom values between this line and the "stop editing" line. */



/* That's all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
	define( 'ABSPATH', __DIR__ . '/' );
}

/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';
#+end_src

#+name: www-config
#+header: :tangle ./srcs/requirements/wordpress/conf/www.conf :mkdirp yes
#+begin_src text
; Start a new pool named 'www'.
; the variable $pool can be used in any directive and will be replaced by the
; pool name ('www' here)
[www]

; Per pool prefix
; It only applies on the following directives:
; - 'access.log'
; - 'slowlog'
; - 'listen' (unixsocket)
; - 'chroot'
; - 'chdir'
; - 'php_values'
; - 'php_admin_values'
; When not set, the global prefix (or /usr) applies instead.
; Note: This directive can also be relative to the global prefix.
; Default Value: none
;prefix = /path/to/pools/$pool

; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = www-data
group = www-data

; The address on which to accept FastCGI requests.
; Valid syntaxes are:
;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific IPv4 address on
;                            a specific port;
;   '[ip:6:addr:ess]:port' - to listen on a TCP socket to a specific IPv6 address on
;                            a specific port;
;   'port'                 - to listen on a TCP socket to all addresses
;                            (IPv6 and IPv4-mapped) on a specific port;
;   '/path/to/unix/socket' - to listen on a unix socket.
; Note: This value is mandatory.
listen = 0.0.0.0:9000

; Set listen(2) backlog.
; Default Value: 511 (-1 on FreeBSD and OpenBSD)
;listen.backlog = 511

; Set permissions for unix socket, if one is used. In Linux, read/write
; permissions must be set in order to allow connections from a web server. Many
; BSD-derived systems allow connections regardless of permissions. The owner
; and group can be specified either by name or by their numeric IDs.
; Default Values: user and group are set as the running user
;                 mode is set to 0660
listen.owner = www-data
listen.group = www-data
;listen.mode = 0660
; When POSIX Access Control Lists are supported you can set them using
; these options, value is a comma separated list of user/group names.
; When set, listen.owner and listen.group are ignored
;listen.acl_users =
;listen.acl_groups =

; List of addresses (IPv4/IPv6) of FastCGI clients which are allowed to connect.
; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original
; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address
; must be separated by a comma. If this value is left blank, connections will be
; accepted from any ip address.
; Default Value: any
;listen.allowed_clients = 127.0.0.1

; Specify the nice(2) priority to apply to the pool processes (only if set)
; The value can vary from -19 (highest priority) to 20 (lower priority)
; Note: - It will only work if the FPM master process is launched as root
;       - The pool processes will inherit the master process priority
;         unless it specified otherwise
; Default Value: no set
; process.priority = -19

; Set the process dumpable flag (PR_SET_DUMPABLE prctl) even if the process user
; or group is differrent than the master process user. It allows to create process
; core dump and ptrace the process for the pool user.
; Default Value: no
; process.dumpable = yes

; Choose how the process manager will control the number of child processes.
; Possible Values:
;   static  - a fixed number (pm.max_children) of child processes;
;   dynamic - the number of child processes are set dynamically based on the
;             following directives. With this process management, there will be
;             always at least 1 children.
;             pm.max_children      - the maximum number of children that can
;                                    be alive at the same time.
;             pm.start_servers     - the number of children created on startup.
;             pm.min_spare_servers - the minimum number of children in 'idle'
;                                    state (waiting to process). If the number
;                                    of 'idle' processes is less than this
;                                    number then some children will be created.
;             pm.max_spare_servers - the maximum number of children in 'idle'
;                                    state (waiting to process). If the number
;                                    of 'idle' processes is greater than this
;                                    number then some children will be killed.
;  ondemand - no children are created at startup. Children will be forked when
;             new requests will connect. The following parameter are used:
;             pm.max_children           - the maximum number of children that
;                                         can be alive at the same time.
;             pm.process_idle_timeout   - The number of seconds after which
;                                         an idle process will be killed.
; Note: This value is mandatory.
pm = dynamic

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
; This value sets the limit on the number of simultaneous requests that will be
; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
; CGI. The below defaults are based on a server without much resources. Don't
; forget to tweak pm.* to fit your needs.
; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
; Note: This value is mandatory.
pm.max_children = 25

; The number of child processes created on startup.
; Note: Used only when pm is set to 'dynamic'
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.start_servers = 5

; The desired minimum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.min_spare_servers = 1

; The desired maximum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.max_spare_servers = 10

; The number of seconds after which an idle process will be killed.
; Note: Used only when pm is set to 'ondemand'
; Default Value: 10s
;pm.process_idle_timeout = 10s;

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
;pm.max_requests = 500

; The URI to view the FPM status page. If this value is not set, no URI will be
; recognized as a status page. It shows the following informations:
;   pool                 - the name of the pool;
;   process manager      - static, dynamic or ondemand;
;   start time           - the date and time FPM has started;
;   start since          - number of seconds since FPM has started;
;   accepted conn        - the number of request accepted by the pool;
;   listen queue         - the number of request in the queue of pending
;                          connections (see backlog in listen(2));
;   max listen queue     - the maximum number of requests in the queue
;                          of pending connections since FPM has started;
;   listen queue len     - the size of the socket queue of pending connections;
;   idle processes       - the number of idle processes;
;   active processes     - the number of active processes;
;   total processes      - the number of idle + active processes;
;   max active processes - the maximum number of active processes since FPM
;                          has started;
;   max children reached - number of times, the process limit has been reached,
;                          when pm tries to start more children (works only for
;                          pm 'dynamic' and 'ondemand');
; Value are updated in real time.
; Example output:
;   pool:                 www
;   process manager:      static
;   start time:           01/Jul/2011:17:53:49 +0200
;   start since:          62636
;   accepted conn:        190460
;   listen queue:         0
;   max listen queue:     1
;   listen queue len:     42
;   idle processes:       4
;   active processes:     11
;   total processes:      15
;   max active processes: 12
;   max children reached: 0
;
; By default the status page output is formatted as text/plain. Passing either
; 'html', 'xml' or 'json' in the query string will return the corresponding
; output syntax. Example:
;   http://www.foo.bar/status
;   http://www.foo.bar/status?json
;   http://www.foo.bar/status?html
;   http://www.foo.bar/status?xml
;
; By default the status page only outputs short status. Passing 'full' in the
; query string will also return status for each pool process.
; Example:
;   http://www.foo.bar/status?full
;   http://www.foo.bar/status?json&full
;   http://www.foo.bar/status?html&full
;   http://www.foo.bar/status?xml&full
; The Full status returns for each process:
;   pid                  - the PID of the process;
;   state                - the state of the process (Idle, Running, ...);
;   start time           - the date and time the process has started;
;   start since          - the number of seconds since the process has started;
;   requests             - the number of requests the process has served;
;   request duration     - the duration in µs of the requests;
;   request method       - the request method (GET, POST, ...);
;   request URI          - the request URI with the query string;
;   content length       - the content length of the request (only with POST);
;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);
;   script               - the main script called (or '-' if not set);
;   last request cpu     - the %cpu the last request consumed
;                          it's always 0 if the process is not in Idle state
;                          because CPU calculation is done when the request
;                          processing has terminated;
;   last request memory  - the max amount of memory the last request consumed
;                          it's always 0 if the process is not in Idle state
;                          because memory calculation is done when the request
;                          processing has terminated;
; If the process is in Idle state, then informations are related to the
; last request the process has served. Otherwise informations are related to
; the current request being served.
; Example output:
;   ************************
;   pid:                  31330
;   state:                Running
;   start time:           01/Jul/2011:17:53:49 +0200
;   start since:          63087
;   requests:             12808
;   request duration:     1250261
;   request method:       GET
;   request URI:          /test_mem.php?N=10000
;   content length:       0
;   user:                 -
;   script:               /home/fat/web/docs/php/test_mem.php
;   last request cpu:     0.00
;   last request memory:  0
;
; Note: There is a real-time FPM status monitoring sample web page available
;       It's available in: /usr/share/php/7.3/fpm/status.html
;
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
;pm.status_path = /status

; The ping URI to call the monitoring page of FPM. If this value is not set, no
; URI will be recognized as a ping page. This could be used to test from outside
; that FPM is alive and responding, or to
; - create a graph of FPM availability (rrd or such);
; - remove a server from a group if it is not responding (load balancing);
; - trigger alerts for the operating team (24/7).
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
;ping.path = /ping

; This directive may be used to customize the response of a ping request. The
; response is formatted as text/plain with a 200 response code.
; Default Value: pong
;ping.response = pong

; The access log file
; Default: not set
;access.log = log/$pool.access.log

; The access log format.
; The following syntax is allowed
;  %%: the '%' character
;  %C: %CPU used by the request
;      it can accept the following format:
;      - %{user}C for user CPU only
;      - %{system}C for system CPU only
;      - %{total}C  for user + system CPU (default)
;  %d: time taken to serve the request
;      it can accept the following format:
;      - %{seconds}d (default)
;      - %{miliseconds}d
;      - %{mili}d
;      - %{microseconds}d
;      - %{micro}d
;  %e: an environment variable (same as $_ENV or $_SERVER)
;      it must be associated with embraces to specify the name of the env
;      variable. Some exemples:
;      - server specifics like: %{REQUEST_METHOD}e or %{SERVER_PROTOCOL}e
;      - HTTP headers like: %{HTTP_HOST}e or %{HTTP_USER_AGENT}e
;  %f: script filename
;  %l: content-length of the request (for POST request only)
;  %m: request method
;  %M: peak of memory allocated by PHP
;      it can accept the following format:
;      - %{bytes}M (default)
;      - %{kilobytes}M
;      - %{kilo}M
;      - %{megabytes}M
;      - %{mega}M
;  %n: pool name
;  %o: output header
;      it must be associated with embraces to specify the name of the header:
;      - %{Content-Type}o
;      - %{X-Powered-By}o
;      - %{Transfert-Encoding}o
;      - ....
;  %p: PID of the child that serviced the request
;  %P: PID of the parent of the child that serviced the request
;  %q: the query string
;  %Q: the '?' character if query string exists
;  %r: the request URI (without the query string, see %q and %Q)
;  %R: remote IP address
;  %s: status (response code)
;  %t: server time the request was received
;      it can accept a strftime(3) format:
;      %d/%b/%Y:%H:%M:%S %z (default)
;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
;  %T: time the log has been written (the request has finished)
;      it can accept a strftime(3) format:
;      %d/%b/%Y:%H:%M:%S %z (default)
;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
;  %u: remote user
;
; Default: "%R - %u %t \"%m %r\" %s"
;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

; The log file for slow requests
; Default Value: not set
; Note: slowlog is mandatory if request_slowlog_timeout is set
;slowlog = log/$pool.log.slow

; The timeout for serving a single request after which a PHP backtrace will be
; dumped to the 'slowlog' file. A value of '0s' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
;request_slowlog_timeout = 0

; Depth of slow log stack trace.
; Default Value: 20
;request_slowlog_trace_depth = 20

; The timeout for serving a single request after which the worker process will
; be killed. This option should be used when the 'max_execution_time' ini option
; does not stop script execution for some reason. A value of '0' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
;request_terminate_timeout = 0

; The timeout set by 'request_terminate_timeout' ini option is not engaged after
; application calls 'fastcgi_finish_request' or when application has finished and
; shutdown functions are being called (registered via register_shutdown_function).
; This option will enable timeout limit to be applied unconditionally
; even in such cases.
; Default Value: no
;request_terminate_timeout_track_finished = no

; Set open file descriptor rlimit.
; Default Value: system defined value
;rlimit_files = 1024

; Set max core size rlimit.
; Possible Values: 'unlimited' or an integer greater or equal to 0
; Default Value: system defined value
;rlimit_core = 0

; Chroot to this directory at the start. This value must be defined as an
; absolute path. When this value is not set, chroot is not used.
; Note: you can prefix with '$prefix' to chroot to the pool prefix or one
; of its subdirectories. If the pool prefix is not set, the global prefix
; will be used instead.
; Note: chrooting is a great security feature and should be used whenever
;       possible. However, all PHP paths will be relative to the chroot
;       (error_log, sessions.save_path, ...).
; Default Value: not set
;chroot =

; Chdir to this directory at the start.
; Note: relative path can be used.
; Default Value: current directory or / when chroot
;chdir = /var/www

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
; Note: on highloaded environement, this can cause some delay in the page
; process time (several ms).
; Default Value: no
;catch_workers_output = yes

; Decorate worker output with prefix and suffix containing information about
; the child that writes to the log and if stdout or stderr is used as well as
; log level and time. This options is used only if catch_workers_output is yes.
; Settings to "no" will output data as written to the stdout or stderr.
; Default value: yes
;decorate_workers_output = no

; Clear environment in FPM workers
; Prevents arbitrary environment variables from reaching FPM worker processes
; by clearing the environment in workers before env vars specified in this
; pool configuration are added.
; Setting to "no" will make all environment variables available to PHP code
; via getenv(), $_ENV and $_SERVER.
; Default Value: yes
;clear_env = no

; Limits the extensions of the main script FPM will allow to parse. This can
; prevent configuration mistakes on the web server side. You should only limit
; FPM to .php extensions to prevent malicious users to use other extensions to
; execute php code.
; Note: set an empty value to allow all extensions.
; Default Value: .php
;security.limit_extensions = .php .php3 .php4 .php5 .php7

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
;env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin
;env[TMP] = /tmp
;env[TMPDIR] = /tmp
;env[TEMP] = /tmp

; Additional php.ini defines, specific to this pool of workers. These settings
; overwrite the values previously defined in the php.ini. The directives are the
; same as the PHP SAPI:
;   php_value/php_flag             - you can set classic ini defines which can
;                                    be overwritten from PHP call 'ini_set'.
;   php_admin_value/php_admin_flag - these directives won't be overwritten by
;                                     PHP call 'ini_set'
; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

; Defining 'extension' will load the corresponding shared extension from
; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
; overwrite previously defined php.ini values, but will append the new value
; instead.

; Note: path INI options can be relative and will be expanded with the prefix
; (pool, global or /usr)

; Default Value: nothing is defined by default except the values in php.ini and
;                specified at startup with the -d argument
;php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f www@my.domain.com
;php_flag[display_errors] = off
;php_admin_value[error_log] = /var/log/fpm-php.www.log
;php_admin_flag[log_errors] = on
;php_admin_value[memory_limit] = 32M
#+end_src

* mariadb
#+name: mariadb-dockerfile
#+header: :tangle ./srcs/requirements/mariadb/Dockerfile :mkdirp yes
#+begin_src dockerfile
FROM debian:buster

RUN apt-get -y update && apt-get -y upgrade
RUN apt-get -y install mariadb-server

RUN mkdir -p /var/run/mysqld
RUN chown -R mysql:mysql /var/run/mysqld
RUN chmod 777 /var/run/mysqld

EXPOSE 3306

CMD ["mysqld", "--bind-address=0.0.0.0"]
#+end_src

#+name: setup-sql
#+header: :tangle ./srcs/requirements/mariadb/conf/setup.sql :mkdirp yes
#+begin_src sql
CREATE DATABASE IF NOT EXISTS wordpress;
CREATE USER 'tgarriss'@'localhost';
SET PASSWORD FOR 'tgarriss'@'localhost' = PASSWORD('password');
GRANT ALL PRIVILEGES ON wordpress.* TO 'tgarriss'@'localhost' IDENTIFIED BY 'password';
GRANT ALL ON wordpress.* to 'tgarriss'@'%' IDENTIFIED BY 'password';

FLUSH PRIVILEGES;

CREATE USER 'superuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'superuser'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
CREATE USER 'superuser'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'superuser'@'%' WITH GRANT OPTION;

FLUSH PRIVILEGES;

ALTER USER 'root'@'localhost' IDENTIFIED BY 'newpass';
flush privileges;
#+end_src
