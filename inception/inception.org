#+title: Inception
#+PROPERTY: header-args :noweb yes
DEADLINE: <2023-02-05 Sun>

#+GITHUB: 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

The purpose of this project is to create a LEMP infrastructure of
Docker services. LEMP refers to a collection of open-source software
that is commonly used together to serve web applications. The term
LEMP is an acronym that represents the configuration of a Linux
operating system with an nginx (pronounced engine-x, hence the E in
the acronym) web server, with site data stored in a MySQL database and
dynamic content processed by PHP.

Some useful links for the project:
 1) Tutorials
    1) [[https://github.com/NEKuipers/Inception/blob/master/Inception_guide.txt][NEKuipers]]
    2) [[https://github.com/vbachele/Inception][vbachele]]
    3) [[https://github.com/twagger/inception][twagger]]
    4) [[https://github.com/raccoman/inception/blob/main/srcs/requirements/wordpress/Dockerfile][raccoman]]
 2) Ressources
    1) [[https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index][docker cheatsheet]]
    2) [[https://discord.com/channels/831591290311409738/964254222105346048][additional links]]

* Table of Contents :TOC:
- [[#requirements][Requirements]]
- [[#research--development][Research & Development]]
  - [[#virtual-machine][virtual machine]]
  - [[#docker][docker]]
  - [[#environment-variables-setup][environment variables setup]]
  - [[#nginx][nginx]]
  - [[#wordpress][wordpress]]
  - [[#mariadb][mariadb]]
  - [[#docker-compose-network][docker-compose network]]
  - [[#docker-compose-volumes][docker-compose volumes]]

* Requirements
*Rules:*
 1) The infrastructure MUST run inside a VM, and thus, MUST use
    ~docker-compose~.
 2) Each docker image must be named after the service
 3) Each service must run inside its dedicated container
 4) The containers must run under Alpine Linux or Debian Buster
 5) Each container must contain a handmade Dockerfile
 6) Every Dockerfile must be called inside a ~docker-compose.yml~,
    which is itself called by the Makefile.
 7) Containers must reboot if a crash occurs
 8) The WordPress database must contain two user accounts:
    1) the Admin (username cannot contain "Admin|admin"")
 9) The use of "network: host", "--link", and "links" is forbidden.
    1) the line "network(s)" must be found in the "docker-compose.yml".
 10) The containers CANNOT be run in an infinite loop.
     1) forbidden hacky patches: tail -f, bash, sleep infinity, while
        true, ...
 11) Your domain name...
     1) must be: <login>.42.fr
     2) must point to your local IP address
 12) The "latest" tag is forbidden (~FROM debian:latest~ in a Dockerfile)
 13) Passwords must NEVER be written in your Dockerfiles
 14) You MUST use environment variables
 15) The use of a ~.env~ file to store envvars is strongly suggested
     (it should be kept at the root of the srcs directory)
 16) The NGINX container must be the sole entrypoint of the
     infrastructure, through port 443 ONLY, and using TLS v1.2 or 1.3

*Required Services:*
 1) 3 Containers that run, respectively:
    1) NGINX with TLS (v1.2 or 1.3)
    2) Wordpress + php-fpm (installed and configured; without NGINX)
    3) MariaDB (without NGINX)
 2) 2 Volumes that contain, respectively:
    1) a WordPress database
    2) files for the WordPress website
 3) A ~docker-network~ that links between containers

*A few suggestions:*
 1) Research proper Dockerfile syntax, and the "PID1"
 2) Look at the Diagram from the PDF, it is helpful!
 3) Look at the folder structure from the PDF
* Research & Development
** virtual machine
First off, build a VM with a GUI (you'll need a GUI to open a web
browser, and display an html page). Use debian. It's already on the
school computers.

Remember to do a barebones install; some default system services
(iptables, namely) make it incredibly complicated to set up the SSH
connection. Follow [[https://www.golinuxcloud.com/ssh-into-virtualbox-vm/][this guide]] to get SSH working without a hitch. Once
that's set up, work from your host OS: it is way more efficient. On a
side note, why are VirtualBox guest OSes so slow? even with a ton of
vRAM...

I'm still stuck with a NAT IP address, but everything seems to work
smoothly. I tested with another computer, and everything seems to run
A-OK!

Also, there's some trickery to use docker without sudo... e.g.: adding
your user to the sudoers group, and to the sudoers file; you can look
up this [[https://stackoverflow.com/questions/48957195/how-to-fix-docker-got-permission-denied-issue][stackoverflow thread]] for the procedure.

Then, install Docker.

** docker
Docker has pretty good documentation. You can find the [[https://docs.docker.com/engine/install/debian/#install-using-the-repository][installation
instructions here]]. Follow this guide properly, and everything should
set up easily. These instructions are valid as of today, 2023-01-08.

Remember that you need sudo privileges to run the following commands.

Start by installing requisites for docker:
#+begin_src bash
sudo apt-get update

sudo apt-get install ca-certificates curl gnupg lsb-release
sudo apt-get install docker-compose
#+END_SRC

Then, add Docker's GPG key, and set up the repository:
#+begin_src bash
sudo mkdir -p /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#+end_src

Install Docker Engine, and Docker Compose, both are necessary for the project:
#+begin_src bash
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
#+end_src

Hopefully, you set up your VM with enough space; docker requires
~500MB of space.

Load up an image designed for testing to ensure that everything
installed properly:
#+begin_src bash
docker run hello-world
#+end_src

*** useful commands
#+begin_src bash
docker build <folder> # builds the image from Dockerfile
docker run <image> # run the docker image
    -d # run container in background
    -p # publish a container's port to the host
docker image kill <image> # stop a running image
docker image rm -f # force delete the image
#+end_src

*** dockerfiles
Dockerfiles are Makefiles for docker images. They are text documents
that contain instructions (keywords defined by docker), and commands
(bash or docker). The format is simple:
#+begin_src dockerfile
# Comment
INSTRUCTION arguments
#+end_src

Any instruction in the Dockerfile operates on its respective
container. i.e.: if you install something, it installs it your
container's filesystem! To have a look around a container, use the
~docker exec -t -i <containerID> /bin/bash~ command.

Multiline commands can be written by escaping the newline with ~\~.

Noteworthy instructions:
 1) FROM: The FROM instruction sets the base image used for subsequent
    instructions. A Dockerfile MUST start with this instruction. You
    can build composite images by adding more FROM keywords. See the
    [[https://docs.docker.com/engine/reference/builder/#from][docs]] for more info. i.e.: ~FROM <image>:<tag>~.
 2) ARG: ARG is used to declare variables within the Dockerfile which
    can reused anywhere in the subsequent code. BEWARE! an ARG defined
    before a FROM is "outside of a build stage, so it can't be used in
    any instruction after a FROM". i.e.: ~ARG variable=value~.
 3) RUN: RUN allows you to execute shell commands in a new layer on
    top of the image, and commit the results. This new image will be
    used for the next instructions. i.e.: ~RUN <command>~.
 4) CMD: The main purpose of a CMD is to provide defaults for an
    executing containers. There can be only one CMD in a Dockerfile.
    There are two forms for CMD instructions: shell form, and exec
    form. The second is preferred, and is expressed as a JSON array.
    i.e.: ~CMD ["/usr/bin/wc", "--help"]~.
 5) EXPOSE: EXPOSE informs Docker that the container listens of the
    specified network ports. You can specify TCP or UDP (TCP is the
    default). EXPORE doesn't publish the port, it functions as
    documentation, mainly... To expose the port, add the ~-p~ flag on
    ~docker run~. i.e.: ~EXPOSE 80/udp~
 6) ENV: ...
 7) ADD: ...
 8) COPY: COPY copies files or directories from <src>, and adds them
    to the filesystem of the container at the path <dest>. You can use
    Go's [[https://golang.org/pkg/path/filepath#Match][filepath.Match]] rules to use wildcards.
 9) ENTRYPOINT: allows you to configure a container that will run as
    an executable. Use the (preferred) exec form: ~ENTRYPOINT
    ["executable", "param1", "param2"]~.
 10) WORKDIR: sets the working directory for any ~RUN, CMD,
     ENTRYPOINT, COPY~, and ~ADD~ instructions. You can set it
     multiple times.

*** docker-compose
Docker-compose make building containers easier.

There's still some stuff I don't understand about volumes... Namely,
what the fuck happens? It copies the <host_path> to <client_path>?
What files do I keep in there? My site files, my config... ?
#+name: nginx-compose
#+begin_src docker-compose
version: '3'

services:
  nginx:
    container_name: nginx
    build: ./srcs/requirements/nginx/
    ports:
      - 443:443
    volumes:
      - /home/tgarriss/wordpress_data:/var/www/html/
    networks:
      - network
    restart: always
#+end_src

Call this docker-compose file with: ~docker compose -f
docker-compose.yml up -d --build~. This runs the build process, and
spins up the nginx container.

*** docker-network
See this [[https://www.aquasec.com/cloud-native-academy/docker-container/docker-networking/][aqua tutorial]], and the links at the bottom of the webpage.

** environment variables setup
Sensitive data used by the db and wordpress should be kept safely
stored in a ~.env~ file.

In your root directory, add the following file:
#+name: .env-config-dev
#+begin_src text
MYSQL_HOST=mariadb
MYSQL_ROOT_PWD=rootpassword

WP_DATABASE_NAME=wordpress
WP_DATABASE_USR=tgarriss
WP_DATABASE_PWD=tgarriss

DOMAIN_NAME=localhost

WP_TITLE=Inception
WP_ADMIN_USR=tomg
WP_ADMIN_PWD=tomg
WP_ADMIN_EMAIL=tomg@gmail.com
WP_USR=tgarriss
WP_PWD=tgarriss
WP_EMAIL=tgarriss@gmail.com
#+end_src

Make sure that you ignore this file in both your ~.gitignore~ and
~.dockerignore~ files.
** nginx
Nginx (pronounced engine-x), is a FLOSS web server. Why NGINX instead
of Apache? Because it uses much less memory, can handle about 4 times
as many requests per second, is highly scalable, has a modular,
event-driven architecture; it also works as a load balancer, and HTTP
cache, and a reverse proxy. This comes at the cost of decreased
flexibility (such as being unable to override systemwide access
settings).

[[https://business-science.github.io/shiny-production-with-aws-book/https-nginx-docker-compose.html][This]] might be useful; [[https://www.baeldung.com/linux/nginx-docker-container][this]] seems even better.

*** binding localhost to domain
Binding your domain name (<login>.42.fr, for this project) to your
localhost is easy. Simply add "127.0.0.1 localhost <domain-name>" to
your VM's ~/etc/hosts~ file.

*** a simple setup
WARNING: This works for a docker-compose.yml configured with port 80,
not 443! It is meant as a simple example:
#+begin_src dockerfile
FROM debian:buster

RUN apt-get update -y && apt-get -y install nginx

COPY ./nginx.conf /etc/nginx/conf.d/
COPY ./index.html /var/www/html/

CMD ["/usr/sbin/nginx", "-g", "daemon off;"]
#+end_src

Assuming you have your custom nginx config, and an html file in your
current directory:
 1) Pull the img
 2) update and install nginx
 3) copy the files to wherever you want them in your container
 4) start up nginx

If everything went ok, you can log into your VM, launch firefox, and
access your domain name; it should display your index.html webpage.

*** enabling https
Now, for enabling https support (using port 443, instead of port 80).
#+name: nginx-dockerfile-dev
#+begin_src dockerfile
# pull the debian:buster image
FROM debian:buster

RUN apt-get update -y
RUN apt-get -y install nginx openssl
# this installs php and php7.3-fpm
RUN apt-get -y install php php7.3-fpm

# required; if inexistant, openssl call raises an error
RUN mkdir /etc/nginx/ssl/
RUN openssl req -x509 -nodes -days 365 \
        -newkey rsa:2048 \
        -keyout /etc/nginx/ssl/tgarriss.key \
        -out /etc/nginx/ssl/tgarriss.csr \
        -subj "/C=CA/ST=QC/L=Thomas/O=42Quebec/OU=tgarriss/CN=tgarriss"

# replace this with your actual conf path
COPY nginx.conf /etc/nginx/conf.d/

# exposes the 443 port (the HTTPS port)
EXPOSE 443

CMD ["/usr/sbin/nginx", "-g", "daemon off;"]
#+end_src

The ~-subj~ flag is used to bypass prompts. See the digicert [[https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm][website]]
for more info. With ~EXPOSE 443~, the webpage won't load, because
there's no certificate yet.

Now, the subject requires that we use ssl certificates. That requires
us to write a custom nginx configuration file. We're gonna generate
our certs with openssl; they're gonna be self-signed, which means
untrusted by web browsers unless approved by a certificate authority
(for the purpose of the project, this a self-signed certificate is
fine). This [[https://stackoverflow.com/questions/10175812/how-to-generate-a-self-signed-ssl-certificate-using-openssl][stackoverflow thread]] has some good information about it.
This [[https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-debian-10][tutorial]] might come in handy too; have a look there's a lot of
info about self-signed certificates.

TSL (Transport Security Layer) and SSL (Secure Sockets Layer) are web
protocols that wrap normal traffic in a protected, encrypted wrapper.
These protocols use a combination of public and private keys. The SSL
key is kept secret on the server, and is used to encrypt content sent
to clients. The SSL certificate is publicly shared with anyone who
requests the content, and decrypts the content signed by the
associated SSL key.

- [X] exposes port 443y
- [X] installs openssl
- [X] generates certificates
- [X] configures openssl
- [-] has a nginx config file
  - [X] listens on port 443
  - [X] uses TLS v1.2 and v1.3
  - [ ] other things... ???
*** nginx config
WARNING: Remember that you'll be using wordpress to display a
website... there's somekind of interaction here that's missing.
Otherwise, my simple index.html webpage is displayed on https.

#+name: nginx-config-dev
#+begin_src text
server {
  # ssl specifies that it should use ssl
  listen 443 ssl;
  # the [::]: means any ipv6 addr
  listen [::]:443 ssl;
  server_name tgarriss.42.fr;

  # sets the cert/key pair and enables TLS
  ssl_certificate /etc/nginx/ssl/tgarriss.csr;
  ssl_certificate_key /etc/nginx/ssl/tgarriss.key;
  ssl_protocols TLSv1.2 TLSv1.3;

  root /var/www/html/;
  index index.html;

  location / {
		try_files $uri $uri/ /index.php$is_args$args;
	}

  location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass wordpress:9000; #PHP for wordpress will listen on the port 9000
		fastcgi_index index.php;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param SCRIPT_NAME $fastcgi_script_name;
	}
}
#+end_src
*** fast-cgi
This is required for interaction with wordpress, and mariadb.
** wordpress
Wordpress is a content management system (CMS). It requires a web
server (nginx), a database (mariadb), and PHP (php-fpm) in order to
function.

Remember that you can pass args to a program that takes arguments with
a file, i.e. "program < file".

*** wordpress docker-compose
#+name: wordpress-compose
#+begin_src docker-compose
  wordpress:
    container_name: wordpress
    depends_on:
      - mariadb
      build: ./srcs/requirements/wordpress/
    ports:
      - 9000:9000
    env_file:
      - .env
    volumes:
      - /home/tgarriss/wordpress_data:/var/www/html/
    networks:
      - network
    restart: always
#+end_src

*** wordpress dockerfile
Now for the wordpress Dockerfile...

#+name: wp-dockerfile-dev
#+begin_src dockerfile
FROM debian:buster

RUN apt-get -y update && apt-get -y install php-fpm php-mysql

RUN adduser -S nginx && addgroup -s nginx
COPY conf/www.conf /etc/php/7.3/fpm/pool.d

COPY conf/index.html /tmp/index.html

RUN wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
RUN chmod +x wp-cli.phar
RUN cp wp-cli.phar /usr/bin/wp

WORKDIR /var/www/html/wordpress

COPY ./tools/configure.sh /tmp/configure.sh

ENTRYPOINT ["sh", "/tmp/configure.sh"]
#+end_src

#+name: configure-wordpress
#+header: :tangle ./srcs/requirements/wordpress/tools/configure.sh
#+begin_src bash
#!/bin/sh
# wait for mysql
while ! mariadb -h$MYSQL_HOST -u$WP_DATABASE_USR -p$WP_DATABASE_PWD $WP_DATABASE_NAME &>/dev/null; do
    sleep 3
done

if [ ! -f "/var/www/html/index.html" ]; then

    # static website
    mv /tmp/index.html /var/www/html/index.html

    # adminer
    wget https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1-mysql-en.php -O /var/www/html/adminer.php &> /dev/null
    wget https://raw.githubusercontent.com/Niyko/Hydra-Dark-Theme-for-Adminer/master/adminer.css -O /var/www/html/adminer.css &> /dev/null

    wp core download --allow-root
    wp config create --dbname=$WP_DATABASE_NAME --dbuser=$WP_DATABASE_USR --dbpass=$WP_DATABASE_PWD --dbhost=$MYSQL_HOST --dbcharset="utf8" --dbcollate="utf8_general_ci" --allow-root
    wp core install --url=$DOMAIN_NAME/wordpress --title=$WP_TITLE --admin_user=$WP_ADMIN_USR --admin_password=$WP_ADMIN_PWD --admin_email=$WP_ADMIN_EMAIL --skip-email --allow-root
    wp user create $WP_USR $WP_EMAIL --role=author --user_pass=$WP_PWD --allow-root
    wp theme install inspiro --activate --allow-root

fi

echo "Wordpress started on :9000"
/usr/sbin/php-fpm7 -F -R
#+end_src


** mariadb
mariadb is necessary for wordpress to function properly. I've been
trying to chunk this down into managable pieces, but it's all
connected together.

Volumes (see the code block below) are directories in the host system
(meaning your linux VM; you need to create them manually, otherwise
the docker-compose build will fail with a "no such file or directory"
error) that can be accessed by any number of containers. Usually,
 1) the data directory: to prevent data loss when a container is
    created, replaced, or deleted.
 2) the logs directory
 3) the config directory: since containers have no editors installed,
    you use your VM to modify these files.

*** mariadb docker-compose
#+name: mariadb-compose
#+begin_src docker-compose
  mariadb:
    container_name: mariadb
    build: ./srcs/requirements/mariadb/
    volumes:
      - /home/tgarriss/mariadb_data:/var/lib/mariadb/
    networks:
      - network
    env_file:
      - .env
    ports:
      - 3306:3306
    restart: always
#+end_src
*** mariadb dockerfile
To manage the configuration of the db, use a bash script, this allows
you to programatically set up the mysql_secure_installation process.
#+name: db-dockerfile-dev
#+begin_src dockerfile
FROM debian:buster

RUN apt-get -y update
RUN apt-get -y install mariadb-server mariadb-client



EXPOSE 3306

CMD ["mysqld", "--bind-address=0.0.0.0"]
#+end_src

Always remember to put ~#!/bin/bash~ at the top of your scripts.

#+name: db-install
#+header: :tangle ./srcs/requirements/mariadb/tools/db_install.sh :mkdirp yes
#+begin_src bash

mysql_secure_installation << _EOF_
Y
Rootp4ss
Rootp4ss
Y
n
Y
Y
_EOF_

#+end_src
** docker-compose network
#+name: network-compose
#+begin_src docker-compose
networks:
  network:
    driver: bridge
#+end_src
** docker-compose volumes
#+name: volume-compose
#+begin_src docker-compose
volumes:
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      device: /home/tgarriss/mariadb_data
      o: bind
  wordpress_data:
    driver: local
    driver_opts:
      type: none
      device: /home/tgarriss/wordpress_data
      o: bind
#+end_src
* Production :noexport:
** docker-compose
#+name: full-docker-compose
#+header: :tangle ./srcs/docker-compose.yml :noweb yes
#+begin_src dockerfile
<<nginx-compose>>

<<mariadb-compose>>

<<wordpress-compose>>

<<volume-compose>>

<<network-compose>>
#+end_src
** Dockerfiles
#+name: nginx-dockerfile
#+header: :tangle ./srcs/requirements/nginx/Dockerfile
#+header: :noweb yes
#+begin_src dockerfile
<<nginx-dockerfile-dev>>
#+end_src

#+name: wp-dockerfile
#+header: :tangle ./srcs/requirements/wordpress/Dockerfile
#+header: :noweb yes
#+begin_src dockerfile
<<wp-dockerfile-dev>>
#+end_src

#+name: db-dockerfile
#+header: :tangle ./srcs/requirements/mariadb/Dockerfile
#+header: :noweb yes
#+begin_src dockerfile
<<db-dockerfile-dev>>
#+end_src
** nginx.conf
#+name: nginx-config
#+header: :tangle ./srcs/requirements/nginx/nginx.conf
#+header: :noweb yes
#+begin_src text
<<nginx-config-dev>>
#+end_src
** .env file
#+name: .env-config
#+header: :tangle ./srcs/.env
#+header: :noweb yes
#+begin_src text
<<.env-config-dev>>
#+end_src
** makefile
#+name: makefile
#+header: :tangle ./Makefile
#+begin_src makefile
all:
	docker compose -f ./srcs/docker-compose.yml up -d --build

down:
	docker compose -f ./scrs/docker-compose.yml down

clean:
	docker stop $$(docker ps -qa);\
	docker rm $$(docker ps -qa);\
	docker image rm $$(docker images -qa);\

.PHONY: all down clean
#+end_src
** simple html
#+name: simple-html
#+header: :tangle ./srcs/requirements/nginx/index.html
#+begin_src html
<HTML>

<HEAD>

<TITLE>Your Title Here</TITLE>

</HEAD>

<BODY BGCOLOR="FFFFFF">

<HR>

<H1>This is a Header</H1>

<H2>This is a Medium Header</H2>

<P> This is a new paragraph!

<P> <B>This is a new paragraph!</B>

<BR> <B><I>This is a new sentence without a paragraph break, in bold italics.</I></B>

<HR>
</BODY>
</HTML>
#+end_src
** www conf
#+name: www-conf
#+header: :tangle ./srcs/requirements/wordpress/conf/www.conf :mkdirp yes
#+begin_src
; Start a new pool named 'www'.
; the variable $pool can be used in any directive and will be replaced by the
; pool name ('www' here)
[www]

; Per pool prefix
; It only applies on the following directives:
; - 'access.log'
; - 'slowlog'
; - 'listen' (unixsocket)
; - 'chroot'
; - 'chdir'
; - 'php_values'
; - 'php_admin_values'
; When not set, the global prefix (or /usr) applies instead.
; Note: This directive can also be relative to the global prefix.
; Default Value: none
;prefix = /path/to/pools/$pool

; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = nginx
group = nginx

; The address on which to accept FastCGI requests.
; Valid syntaxes are:
;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific IPv4 address on
;                            a specific port;
;   '[ip:6:addr:ess]:port' - to listen on a TCP socket to a specific IPv6 address on
;                            a specific port;
;   'port'                 - to listen on a TCP socket to all addresses
;                            (IPv6 and IPv4-mapped) on a specific port;
;   '/path/to/unix/socket' - to listen on a unix socket.
; Note: This value is mandatory.
listen = 9000

; Set listen(2) backlog.
; Default Value: 511 (-1 on FreeBSD and OpenBSD)
;listen.backlog = 511

; Set permissions for unix socket, if one is used. In Linux, read/write
; permissions must be set in order to allow connections from a web server. Many
; BSD-derived systems allow connections regardless of permissions. The owner
; and group can be specified either by name or by their numeric IDs.
; Default Values: user and group are set as the running user
;                 mode is set to 0660
;listen.owner = nobody
;listen.group = nobody
;listen.mode = 0660
; When POSIX Access Control Lists are supported you can set them using
; these options, value is a comma separated list of user/group names.
; When set, listen.owner and listen.group are ignored
;listen.acl_users =
;listen.acl_groups =

; List of addresses (IPv4/IPv6) of FastCGI clients which are allowed to connect.
; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original
; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address
; must be separated by a comma. If this value is left blank, connections will be
; accepted from any ip address.
; Default Value: any
;listen.allowed_clients = 127.0.0.1

; Specify the nice(2) priority to apply to the pool processes (only if set)
; The value can vary from -19 (highest priority) to 20 (lower priority)
; Note: - It will only work if the FPM master process is launched as root
;       - The pool processes will inherit the master process priority
;         unless it specified otherwise
; Default Value: no set
; process.priority = -19

; Set the process dumpable flag (PR_SET_DUMPABLE prctl) even if the process user
; or group is differrent than the master process user. It allows to create process
; core dump and ptrace the process for the pool user.
; Default Value: no
; process.dumpable = yes

; Choose how the process manager will control the number of child processes.
; Possible Values:
;   static  - a fixed number (pm.max_children) of child processes;
;   dynamic - the number of child processes are set dynamically based on the
;             following directives. With this process management, there will be
;             always at least 1 children.
;             pm.max_children      - the maximum number of children that can
;                                    be alive at the same time.
;             pm.start_servers     - the number of children created on startup.
;             pm.min_spare_servers - the minimum number of children in 'idle'
;                                    state (waiting to process). If the number
;                                    of 'idle' processes is less than this
;                                    number then some children will be created.
;             pm.max_spare_servers - the maximum number of children in 'idle'
;                                    state (waiting to process). If the number
;                                    of 'idle' processes is greater than this
;                                    number then some children will be killed.
;  ondemand - no children are created at startup. Children will be forked when
;             new requests will connect. The following parameter are used:
;             pm.max_children           - the maximum number of children that
;                                         can be alive at the same time.
;             pm.process_idle_timeout   - The number of seconds after which
;                                         an idle process will be killed.
; Note: This value is mandatory.
pm = dynamic

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
; This value sets the limit on the number of simultaneous requests that will be
; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
; CGI. The below defaults are based on a server without much resources. Don't
; forget to tweak pm.* to fit your needs.
; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
; Note: This value is mandatory.
pm.max_children = 5

; The number of child processes created on startup.
; Note: Used only when pm is set to 'dynamic'
; Default Value: (min_spare_servers + max_spare_servers) / 2
pm.start_servers = 2

; The desired minimum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.min_spare_servers = 1

; The desired maximum number of idle server processes.
; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
pm.max_spare_servers = 3

; The number of seconds after which an idle process will be killed.
; Note: Used only when pm is set to 'ondemand'
; Default Value: 10s
;pm.process_idle_timeout = 10s;

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
;pm.max_requests = 500

; The URI to view the FPM status page. If this value is not set, no URI will be
; recognized as a status page. It shows the following informations:
;   pool                 - the name of the pool;
;   process manager      - static, dynamic or ondemand;
;   start time           - the date and time FPM has started;
;   start since          - number of seconds since FPM has started;
;   accepted conn        - the number of request accepted by the pool;
;   listen queue         - the number of request in the queue of pending
;                          connections (see backlog in listen(2));
;   max listen queue     - the maximum number of requests in the queue
;                          of pending connections since FPM has started;
;   listen queue len     - the size of the socket queue of pending connections;
;   idle processes       - the number of idle processes;
;   active processes     - the number of active processes;
;   total processes      - the number of idle + active processes;
;   max active processes - the maximum number of active processes since FPM
;                          has started;
;   max children reached - number of times, the process limit has been reached,
;                          when pm tries to start more children (works only for
;                          pm 'dynamic' and 'ondemand');
; Value are updated in real time.
; Example output:
;   pool:                 www
;   process manager:      static
;   start time:           01/Jul/2011:17:53:49 +0200
;   start since:          62636
;   accepted conn:        190460
;   listen queue:         0
;   max listen queue:     1
;   listen queue len:     42
;   idle processes:       4
;   active processes:     11
;   total processes:      15
;   max active processes: 12
;   max children reached: 0
;
; By default the status page output is formatted as text/plain. Passing either
; 'html', 'xml' or 'json' in the query string will return the corresponding
; output syntax. Example:
;   http://www.foo.bar/status
;   http://www.foo.bar/status?json
;   http://www.foo.bar/status?html
;   http://www.foo.bar/status?xml
;
; By default the status page only outputs short status. Passing 'full' in the
; query string will also return status for each pool process.
; Example:
;   http://www.foo.bar/status?full
;   http://www.foo.bar/status?json&full
;   http://www.foo.bar/status?html&full
;   http://www.foo.bar/status?xml&full
; The Full status returns for each process:
;   pid                  - the PID of the process;
;   state                - the state of the process (Idle, Running, ...);
;   start time           - the date and time the process has started;
;   start since          - the number of seconds since the process has started;
;   requests             - the number of requests the process has served;
;   request duration     - the duration in µs of the requests;
;   request method       - the request method (GET, POST, ...);
;   request URI          - the request URI with the query string;
;   content length       - the content length of the request (only with POST);
;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);
;   script               - the main script called (or '-' if not set);
;   last request cpu     - the %cpu the last request consumed
;                          it's always 0 if the process is not in Idle state
;                          because CPU calculation is done when the request
;                          processing has terminated;
;   last request memory  - the max amount of memory the last request consumed
;                          it's always 0 if the process is not in Idle state
;                          because memory calculation is done when the request
;                          processing has terminated;
; If the process is in Idle state, then informations are related to the
; last request the process has served. Otherwise informations are related to
; the current request being served.
; Example output:
;   ************************
;   pid:                  31330
;   state:                Running
;   start time:           01/Jul/2011:17:53:49 +0200
;   start since:          63087
;   requests:             12808
;   request duration:     1250261
;   request method:       GET
;   request URI:          /test_mem.php?N=10000
;   content length:       0
;   user:                 -
;   script:               /home/fat/web/docs/php/test_mem.php
;   last request cpu:     0.00
;   last request memory:  0
;
; Note: There is a real-time FPM status monitoring sample web page available
;       It's available in: /usr/share/php7/fpm/status.html
;
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
;pm.status_path = /status

; The ping URI to call the monitoring page of FPM. If this value is not set, no
; URI will be recognized as a ping page. This could be used to test from outside
; that FPM is alive and responding, or to
; - create a graph of FPM availability (rrd or such);
; - remove a server from a group if it is not responding (load balancing);
; - trigger alerts for the operating team (24/7).
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
;ping.path = /ping

; This directive may be used to customize the response of a ping request. The
; response is formatted as text/plain with a 200 response code.
; Default Value: pong
;ping.response = pong

; The access log file
; Default: not set
;access.log = log/php7/$pool.access.log

; The access log format.
; The following syntax is allowed
;  %%: the '%' character
;  %C: %CPU used by the request
;      it can accept the following format:
;      - %{user}C for user CPU only
;      - %{system}C for system CPU only
;      - %{total}C  for user + system CPU (default)
;  %d: time taken to serve the request
;      it can accept the following format:
;      - %{seconds}d (default)
;      - %{miliseconds}d
;      - %{mili}d
;      - %{microseconds}d
;      - %{micro}d
;  %e: an environment variable (same as $_ENV or $_SERVER)
;      it must be associated with embraces to specify the name of the env
;      variable. Some exemples:
;      - server specifics like: %{REQUEST_METHOD}e or %{SERVER_PROTOCOL}e
;      - HTTP headers like: %{HTTP_HOST}e or %{HTTP_USER_AGENT}e
;  %f: script filename
;  %l: content-length of the request (for POST request only)
;  %m: request method
;  %M: peak of memory allocated by PHP
;      it can accept the following format:
;      - %{bytes}M (default)
;      - %{kilobytes}M
;      - %{kilo}M
;      - %{megabytes}M
;      - %{mega}M
;  %n: pool name
;  %o: output header
;      it must be associated with embraces to specify the name of the header:
;      - %{Content-Type}o
;      - %{X-Powered-By}o
;      - %{Transfert-Encoding}o
;      - ....
;  %p: PID of the child that serviced the request
;  %P: PID of the parent of the child that serviced the request
;  %q: the query string
;  %Q: the '?' character if query string exists
;  %r: the request URI (without the query string, see %q and %Q)
;  %R: remote IP address
;  %s: status (response code)
;  %t: server time the request was received
;      it can accept a strftime(3) format:
;      %d/%b/%Y:%H:%M:%S %z (default)
;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
;  %T: time the log has been written (the request has finished)
;      it can accept a strftime(3) format:
;      %d/%b/%Y:%H:%M:%S %z (default)
;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
;  %u: remote user
;
; Default: "%R - %u %t \"%m %r\" %s"
;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

; The log file for slow requests
; Default Value: not set
; Note: slowlog is mandatory if request_slowlog_timeout is set
;slowlog = log/php7/$pool.slow.log

; The timeout for serving a single request after which a PHP backtrace will be
; dumped to the 'slowlog' file. A value of '0s' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
;request_slowlog_timeout = 0

; Depth of slow log stack trace.
; Default Value: 20
;request_slowlog_trace_depth = 20

; The timeout for serving a single request after which the worker process will
; be killed. This option should be used when the 'max_execution_time' ini option
; does not stop script execution for some reason. A value of '0' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
;request_terminate_timeout = 0

; The timeout set by 'request_terminate_timeout' ini option is not engaged after
; application calls 'fastcgi_finish_request' or when application has finished and
; shutdown functions are being called (registered via register_shutdown_function).
; This option will enable timeout limit to be applied unconditionally
; even in such cases.
; Default Value: no
;request_terminate_timeout_track_finished = no

; Set open file descriptor rlimit.
; Default Value: system defined value
;rlimit_files = 1024

; Set max core size rlimit.
; Possible Values: 'unlimited' or an integer greater or equal to 0
; Default Value: system defined value
;rlimit_core = 0

; Chroot to this directory at the start. This value must be defined as an
; absolute path. When this value is not set, chroot is not used.
; Note: you can prefix with '$prefix' to chroot to the pool prefix or one
; of its subdirectories. If the pool prefix is not set, the global prefix
; will be used instead.
; Note: chrooting is a great security feature and should be used whenever
;       possible. However, all PHP paths will be relative to the chroot
;       (error_log, sessions.save_path, ...).
; Default Value: not set
;chroot =

; Chdir to this directory at the start.
; Note: relative path can be used.
; Default Value: current directory or / when chroot
;chdir = /var/www

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
; Note: on highloaded environement, this can cause some delay in the page
; process time (several ms).
; Default Value: no
;catch_workers_output = yes

; Decorate worker output with prefix and suffix containing information about
; the child that writes to the log and if stdout or stderr is used as well as
; log level and time. This options is used only if catch_workers_output is yes.
; Settings to "no" will output data as written to the stdout or stderr.
; Default value: yes
;decorate_workers_output = no

; Clear environment in FPM workers
; Prevents arbitrary environment variables from reaching FPM worker processes
; by clearing the environment in workers before env vars specified in this
; pool configuration are added.
; Setting to "no" will make all environment variables available to PHP code
; via getenv(), $_ENV and $_SERVER.
; Default Value: yes
;clear_env = no

; Limits the extensions of the main script FPM will allow to parse. This can
; prevent configuration mistakes on the web server side. You should only limit
; FPM to .php extensions to prevent malicious users to use other extensions to
; execute php code.
; Note: set an empty value to allow all extensions.
; Default Value: .php
;security.limit_extensions = .php .php3 .php4 .php5 .php7

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
;env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin
;env[TMP] = /tmp
;env[TMPDIR] = /tmp
;env[TEMP] = /tmp

; Additional php.ini defines, specific to this pool of workers. These settings
; overwrite the values previously defined in the php.ini. The directives are the
; same as the PHP SAPI:
;   php_value/php_flag             - you can set classic ini defines which can
;                                    be overwritten from PHP call 'ini_set'.
;   php_admin_value/php_admin_flag - these directives won't be overwritten by
;                                     PHP call 'ini_set'
; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

; Defining 'extension' will load the corresponding shared extension from
; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
; overwrite previously defined php.ini values, but will append the new value
; instead.

; Note: path INI options can be relative and will be expanded with the prefix
; (pool, global or /usr)

; Default Value: nothing is defined by default except the values in php.ini and
;                specified at startup with the -d argument
;php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f www@my.domain.com
;php_flag[display_errors] = off
;php_admin_value[error_log] = /var/log/php7/$pool.error.log
;php_admin_flag[log_errors] = on
;php_admin_value[memory_limit] = 32M
#+end_src
** wordpress-html
#+name: wordpress-html
#+header: :tangle ./srcs/requirements/wordpress/conf/index.html
#+begin_src html
<!doctype html>
<html>
  <head>
    <title>Inception</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
  </head>
  <body>
    <p align="center">
        <img src="https://img.shields.io/github/contributors/raccoman/inception?style=for-the-badge"/>
        <img src="https://img.shields.io/github/forks/raccoman/inception?style=for-the-badge"/>
        <img src="https://img.shields.io/github/stars/raccoman/inception?style=for-the-badge"/>
        <img src="https://img.shields.io/github/issues/raccoman/inception?style=for-the-badge"/>
        <img src="https://img.shields.io/github/license/raccoman/inception?style=for-the-badge"/>
      </p>

      <p align="center">
        <img src="https://badge42.herokuapp.com/api/stats/raccoman?privacyEmail=true"/>
      </p>
      <h3 align="center">
        INCEPTION
      </h3>
      <p align="center">
        This project aims to broaden your knowledge of system administration by using Docker
      </p>

      <h2 align="center">
        Evaluation
      </h2>
      <p align="center">

        <a href="wordpress/index.php">
            <button>WORDPRESS</button>
        </a>

        <a href="adminer.php">
            <button>ADMINER</button>
        </a>

        <a href="https://localhost:9443">
          <button>PORTAINER</button>
        </a>

      </p>

      <h2 align="center">
        Contact
      </h2>
      <p align="center">
        This is my inception project from the 42 cursus, need help: raccoman@student.42roma.it
      </p>

      <p align="center">
          <img src="https://forthebadge.com/images/badges/made-with-c.svg"/>
          <img src="https://forthebadge.com/images/badges/not-a-bug-a-feature.svg"/>
      </p>
  </body>
  <style>

    body {
        font-family: 'Poppins', sans-serif;
        background-color: rgb(12, 17, 23);
        color: white;
    }

    a, u {
        text-decoration: none;
    }

    button {
        border: none;
        background-color: rgb(34, 104, 186);
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 12px;
        cursor: pointer;
    }

  </style>
</html>
#+end_src
