#+NAME: test-validate-filepath
#+HEADER: :exports code :mkdirp yes :results none :main no
#+HEADER: :tangle Source/tests/test_validate_filepath.c
#+BEGIN_SRC C
#include "minunit.h"

// THIS CODE WAS PULLED FROM: https://github.com/siu/minunit

/*
    --> mu_check(condition): will pass if the condition is evaluated to true,
            otherwise it will show the condition as the error message
            mu_check(i == 3);
    --> mu_fail(message): will fail and show the message
            mu_fail("this fails");
    --> mu_assert(condition, message): will pass if the condition is true,
            otherwise it will show the failed condition and the message
            mu_assert(i == 3, "i should be equal to three");
    --> mu_assert_int_eq(expected, result): it will pass if the two numbers are
            equal or show their values as the error message
    --> mu_assert_double_eq(expected, result): it will pass if the two values are
            almost equal or show their values as the error message. The value of MINUNIT_EPSILON
            sets the threshold to determine if the values are close enough.
    --> mu_assert_string_eq(str1, str2): compares two strings. 
    ,*!* A _fail TEST EXISTS FOR MOST TESTS. EX: mu_assert_int_eq_fail(expected, result);
,*/

// USE GLOBAL VARIABLES FOR TESTING.
// EACH test_UNIT.c FILE SHOULD TEST ONE THING.

char *filepath_valid;
char *filepath_null;
char *filepath_fail_extension;
char *filepath_fail_no_access;

void    test_setup(void)
{
    filepath_valid = ft_strdup("");
}

void    test_teardown(void)
{
    // FREE ALLOCATED MEMORY.
}

MU_TEST(test_NAME)
{
    // CHANGE PLACEHOLDER NAME
    // ADD ASSERT CALLS.
}

MU_TEST_SUITE(test_suite)
{
    // MU_SUITE_CONFIGURE(&test_setup, &test_teardown);
    MU_RUN_TEST(test_NAME);
}

int main(void)
{
    MU_RUN_SUITE(test_suite);
    MU_REPORT();
    return (MU_EXIT_CODE);
}
#+END_SRC
